# JS tooling
Gert Hengeveld<br >
Ruben Oostinga

https://twitter.com/GHengeveld
https://twitter.com/rubenoostinga

![Logo Xebia](img/logo-xebia.png)

---

### Introduce yourself

- What is your name?
- What is your current front-end experience?
- What do you want to get out of this course?

---

### Concepts to understand

- JS bundles
- Minification
- JS dependencies
- Modules

Note:
- JS bundle:
  - Concatenation of JS files
  - Faster to load than separate files
- Minification:
  - Shortens all variables names
  - Removes whitespace
  - Other optimizes for minimal filesize
  - Goal: load fast in browser
- JS depedencies
  - You can put all javascript in a single file
  - Too big -> split it up
  - Split up files need to run in a specific order
  - Code depends on other code
  - Example:
    - Angular module declaration should run before you add controllers / directives to that angular module
- Modules:
  - JS file with private scope
  - By default vars declarations are global
  - Wrapping code in a function makes it a module
  - Immediately-Invoked Function Expression (IIFE)

vvv

### Immediately-Invoked Function Expression (IIFE)
``` javascript
var counter = (function(){
  var i = 0;
  return {
    get: function(){
      return i;
    },
    set: function( val ){
      i = val;
    },
    increment: function() {
      return ++i;
    }
  };
}());
```

Note:
- Example of a classic JS module
- There are others:
  - AMD
  - CommonJS: like NodeJS
  - ES6: JS standard modules
- Function is invoked immediately
- `var i` is locally scoped
- a public API is exposed:
  - `get`, `set`, `increment`
---

### Webpack

![What is webpack](img/what-is-webpack.png)

---

### What problem are we solving?

Note:
- Only solve problems you have
- Especially when you already have a working project
- There are too many cool new tools to use everything

---

### What problem are we solving?

- You want to bundle your javascript for performance
- 

---

### Comparison to various tools

- Task runners
  - Grunt
  - Gulp
Module loaders / bundlers
  - RequireJS
  - browserify
  - jspm

Note:
- Give a history of where these tools come from
- Compare their features

---

### Grunt: The JavaScript task runner
- Runs tasks sequentially
- Writes intermediate files to disk

![Logo grunt](img/grunt-logo.png)

Note:
- Which tasks can it do?
  - Call a transpiler
  - Concatenate files
  - Call a minifier
- Lots of configuration
- Task declaration separate from task configuration
- Writing to disk can get slow
- But it works, we are still using it at wehkamp
- Does not understand dependencies
  - Only understands filesystem

---

### Gulp: The streaming build system

- Define tasks ask streams
- Don't write to disk for intermediate results
- Tasks run parallel

![Logo gulp](img/logo-gulp.png)

Note:
- The configuration is easier to read
- Runs faster due to:
  - parallelization
  - not writing to disk
- Still a task runner
  - Does not understand dependencies
    - Only understands filesystem

---

### RequireJS: A JS module loader

- Declare dependencies per module instead of a list of scripts
- Loads dependencies via XHR requests in the browser
- Only supports Asynchronous Module Definition (AMD)
- Bundle files in build step
- Can be used on NodeJS as well

Note:

- One of the first module loaders
  - Started in 2009
  - Based on the dojo toolkit loader
- Module loaders are different from task runners
- Understand JS dependencies
- No list of scripts with implicit dependencies
  - Like angular module example

vvv

### Asynchronous Module Definition (AMD)

``` javascript
define(['jquery'] , function ($) {
  return function () {};
});
```

Note:
- Similar to NG DI
- Dependencies in array
- Function invoked with instances

---


